*** Fichier data/progr5.lea
--> TOKEN_VAR : var
--> TOKEN_IDENTIFIER : x
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_SEMIC : ;
--> TOKEN_FUNCTION : function
x registered
--> TOKEN_IDENTIFIER : sum
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_COMMA : ,
i registered
--> TOKEN_IDENTIFIER : j
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_RPAR : )
j registered
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_VAR : var
--> TOKEN_IDENTIFIER : k
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_SEMIC : ;
--> TOKEN_BEGIN : begin
k registered
--> TOKEN_RETURN : return
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_PLUS : +
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_FUNCTION : function
--> TOKEN_IDENTIFIER : pgcd
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_COMMA : ,
i registered
--> TOKEN_IDENTIFIER : j
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_RPAR : )
j registered
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_BEGIN : begin
--> TOKEN_WHILE : while
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_NE : !=
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
--> TOKEN_DO : do
--> TOKEN_IF : if
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_GT : >
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
--> TOKEN_THEN : then
--> TOKEN_IDENTIFIER : i
--> TOKEN_AFF : =
--> TOKEN_IDENTIFIER : i
--> TOKEN_MINUS : -
--> TOKEN_IDENTIFIER : j
--> TOKEN_SEMIC : ;
--> TOKEN_ELSE : else
--> TOKEN_IDENTIFIER : j
--> TOKEN_AFF : =
--> TOKEN_IDENTIFIER : j
--> TOKEN_MINUS : -
--> TOKEN_IDENTIFIER : i
--> TOKEN_SEMIC : ;
--> TOKEN_RETURN : return
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_FUNCTION : function
--> TOKEN_IDENTIFIER : foo
--> TOKEN_LPAR : (
--> TOKEN_RPAR : )
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_BEGIN : begin
--> TOKEN_RETURN : return
--> TOKEN_LIT_INTEGER : 1
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_BEGIN : begin
--> TOKEN_IDENTIFIER : x
--> TOKEN_AFF : =
--> TOKEN_LIT_INTEGER : 5
--> TOKEN_SEMIC : ;
--> TOKEN_IDENTIFIER : x
--> TOKEN_AFF : =
--> TOKEN_IDENTIFIER : sum
--> TOKEN_LPAR : (
--> TOKEN_LIT_INTEGER : 3
--> TOKEN_COMMA : ,
--> TOKEN_LIT_INTEGER : 5
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_PRINTLN : println
--> TOKEN_IDENTIFIER : sum
--> TOKEN_LPAR : (
--> TOKEN_LIT_INTEGER : 3
--> TOKEN_COMMA : ,
--> TOKEN_LIT_INTEGER : 5
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_PRINTLN : println
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : pgcd
--> TOKEN_LPAR : (
--> TOKEN_LIT_INTEGER : 78
--> TOKEN_COMMA : ,
--> TOKEN_LIT_INTEGER : 90
--> TOKEN_RPAR : )
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
