*** Fichier data/progr5.lea
--> TOKEN_VAR : var
--> TOKEN_IDENTIFIER : x
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_SEMIC : ;
--> TOKEN_FUNCTION : function
--> TOKEN_IDENTIFIER : foo
--> TOKEN_LPAR : (
--> TOKEN_RPAR : )
StackEnvironment --> 0 elements added to the stack. (new scope)
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_BEGIN : begin
--> TOKEN_RETURN : return
--> TOKEN_LIT_INTEGER : 1
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_FUNCTION : function
CONTEXT : foo
--> TOKEN_IDENTIFIER : sum
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_COMMA : ,
--> TOKEN_IDENTIFIER : j
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_RPAR : )
StackEnvironment --> 2 elements added to the stack. (new scope)
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_VAR : var
--> TOKEN_IDENTIFIER : k
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_SEMIC : ;
--> TOKEN_BEGIN : begin
--> TOKEN_IDENTIFIER : x
--> TOKEN_AFF : =
Asked for x.
--> TOKEN_LIT_INTEGER : 2
--> TOKEN_SEMIC : ;
--> TOKEN_RETURN : return
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_PLUS : +
Asked for i.
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
Asked for j.
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_FUNCTION : function
CONTEXT : sum
--> TOKEN_IDENTIFIER : pgcd
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_COMMA : ,
--> TOKEN_IDENTIFIER : j
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_RPAR : )
StackEnvironment --> 2 elements added to the stack. (new scope)
--> TOKEN_COLON : :
--> TOKEN_INTEGER : integer
--> TOKEN_BEGIN : begin
--> TOKEN_WHILE : while
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_NE : !=
Asked for i.
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
Asked for j.
--> TOKEN_DO : do
--> TOKEN_IF : if
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_GT : >
Asked for i.
--> TOKEN_IDENTIFIER : j
--> TOKEN_RPAR : )
Asked for j.
--> TOKEN_THEN : then
--> TOKEN_IDENTIFIER : i
--> TOKEN_AFF : =
Asked for i.
--> TOKEN_IDENTIFIER : i
--> TOKEN_MINUS : -
Asked for i.
--> TOKEN_IDENTIFIER : j
--> TOKEN_SEMIC : ;
Asked for j.
--> TOKEN_ELSE : else
--> TOKEN_IDENTIFIER : j
--> TOKEN_AFF : =
Asked for j.
--> TOKEN_IDENTIFIER : j
--> TOKEN_MINUS : -
Asked for j.
--> TOKEN_IDENTIFIER : i
--> TOKEN_SEMIC : ;
Asked for i.
--> TOKEN_RETURN : return
--> TOKEN_LPAR : (
--> TOKEN_IDENTIFIER : i
--> TOKEN_RPAR : )
Asked for i.
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
--> TOKEN_BEGIN : begin
CONTEXT : pgcd
--> TOKEN_IDENTIFIER : x
--> TOKEN_AFF : =
Asked for x.
--> TOKEN_LIT_INTEGER : 5
--> TOKEN_SEMIC : ;
--> TOKEN_IDENTIFIER : sum
--> TOKEN_LPAR : (
--> TOKEN_LIT_INTEGER : 3
--> TOKEN_COMMA : ,
--> TOKEN_LIT_INTEGER : 5
--> TOKEN_RPAR : )
--> TOKEN_SEMIC : ;
--> TOKEN_END : end
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
*** Typage correct
